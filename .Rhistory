plot_total_sales <-
function(unit = "month", date_format = "%B %Y", interactive = TRUE) {
# Handle Data
data_tbl <- bike_orderlines_tbl %>%
select(order_date, total_price) %>%
mutate(date_rounded = floor_date(order_date, unit = unit)) %>%
group_by(date_rounded) %>%
summarise(total_sales = sum(total_price)) %>%
ungroup() %>%
mutate(label_text = str_glue("Sales: {format_to_euro(total_sales)}
Date: {date_rounded %>% format(date_format)}"))
# Make Plot
g1 <- data_tbl %>%
ggplot(aes(x = date_rounded, y = total_sales)) +
# Geoms
geom_point(aes(text = label_text), color = "#2C3E50") +
geom_smooth(method = "loess", span = 0.2) +
# Formatting
scale_y_continuous(labels = euro_format()) +
expand_limits(y = 0) +
labs(
title = "Total Sales",
y = "Revenue (Euro)",
x = ""
)
# Static vs Interactive Logic
if (interactive) {
return(ggplotly(g1, tooltip = "text"))
} else {
return(g1)
}
}
plot_categories <-
function(category_1 = "All", category_2 = "All",
unit = "month", date_format = "%B %Y",
ncol = 1, scales = "free_y",
interactive = TRUE) {
# Handle Data
data_tbl <- bike_orderlines_tbl %>%
select(order_date, category_1, category_2, total_price) %>%
mutate(date_rounded = floor_date(order_date, unit = unit)) %>%
group_by(date_rounded, category_1, category_2) %>%
summarise(total_sales = sum(total_price)) %>%
ungroup() %>%
mutate(label_text = str_glue("Sales: {format_to_euro(total_sales)}
Date: {date_rounded %>% format(date_format)}")) %>%
mutate(category_2 = as_factor(category_2) %>%
fct_reorder2(date_rounded, total_sales))
# Handle Inputs
cat_1_text <- str_to_lower(category_1)
cat_2_text <- str_to_lower(category_2)
# Create Filter Logic
if (cat_1_text != "all") {
data_tbl <- data_tbl %>%
filter(category_1 %>%
str_to_lower() %>%
str_detect(pattern = cat_1_text))
}
if (cat_2_text != "all") {
data_tbl <- data_tbl %>%
filter(category_2 %>%
str_to_lower() %>%
str_detect(pattern = cat_2_text))
}
# Make Plot
g2 <- data_tbl %>%
ggplot(aes(x = date_rounded, y = total_sales, color = category_2)) +
# Geoms
geom_point(aes(text = label_text), color = "#2c3e50") +
geom_smooth(method = "loess", span = 0.2) +
facet_wrap(~ category_2, scales = scales, ncol = ncol) +
# Formatting
expand_limits(y = 0) +
theme(legend.position = "none",
strip.text.x = element_text(margin = margin(5, 5, 5, 5, unit = "pt"))) +
scale_y_continuous(labels = euro_format(scale = 1e-3, suffix = "K ")) +
labs(
title = "Sales By Category 2",
y = "", x = ""
)
# Static Vs Interactive Logic
if (interactive) {
return(ggplotly(g2, tooltip = "text"))
} else {
return(g2)
}
}
format_to_euro <-
function(x, suffix = " ") {
scales::dollar(x,
suffix       = suffix,
prefix       = "",
big.mark     = ".",
decimal.mark = ",")
}
euro_format <-
function(scale        = 1,
prefix       = "",
suffix       = " ",
big.mark     = ".",
decimal.mark = ",") {
scales::dollar_format(suffix       = suffix,
prefix       = prefix,
big.mark     = big.mark,
decimal.mark = decimal.mark,
scale        = scale)
}
library(flexdashboard)
# Core
library(tidyverse)
# Core
library(tidyverse)
# Interactive Visualizations
library(plotly)
# Core
library(tidyverse)
# Interactive Visualizations
library(plotly)
# Spatial Data
library(raster)
---
title: "Sales Dashboard"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
---
---
title: "Sales Dashboard"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
---
```{r setup, include=FALSE}
library(flexdashboard)
library(flexdashboard)
Sidebar {.sidebar}
=======================================================================
Button Inputs
- Input 1
- Input 2
Page 1
=======================================================================
<!-- Sidebar {.sidebar} -->
<!-- ----------------------------------------------------------------------- -->
<!-- Button Inputs -->
<!-- - Input 1 -->
<!-- - Input 2 -->
Column {data-height=650 .tabset}
-----------------------------------------------------------------------
library(flexdashboard)
# Core
library(tidyverse)
# Interactive Visualizations
library(plotly)
library(flexdashboard)
library(flexdashboard)
# Core
library(tidyverse)
# Interactive Visualizations
library(plotly)
# Spatial Data
library(raster)
library(sf)
# Currency formatting
source("C:/Users/rueta/Desktop/Data-Science-Products/plot_sales.R")
# Bike data
bikes_tbl      <- readRDS("C:/Users/rueta/Desktop/Data-Science-Products/data/bikes_tbl.rds")
bikeshops_tbl  <- readRDS("C:/Users/rueta/Desktop/Data-Science-Products/data/bikeshops_tbl.rds")
orderlines_tbl <- readRDS("C:/Users/rueta/Desktop/Data-Science-Products/data/orderlines_tbl.rds")
bike_orderlines_tbl <- orderlines_tbl %>%
left_join(bikes_tbl,     by = c("product_id" = "bike_id")) %>%
left_join(bikeshops_tbl, by = c("customer_id" = "bikeshop_id")) %>%
mutate(total_price = price_euro * quantity)
# German spatial data
germany_sp <- getData('GADM', country='DE', level=1)
germany_sf <- st_as_sf(germany_sp) %>%
# Add english names
mutate(VARNAME_1 = ifelse(is.na(VARNAME_1), NAME_1, VARNAME_1))
install.packages("rgeos")
library(rgeos)
# German spatial data
germany_sp <- getData('GADM', country='DE', level=1)
germany_sf <- st_as_sf(germany_sp) %>%
# Add english names
mutate(VARNAME_1 = ifelse(is.na(VARNAME_1), NAME_1, VARNAME_1))
Column {data-width=1000}
---------------------------------------------------------------
### By State
```{r}
geo_plot_tbl <- bike_orderlines_tbl %>%
group_by(state) %>%
summarise(total_revenue = sum(total_price)) %>%
ungroup() %>%
right_join(germany_sf, by = c("state" = "VARNAME_1")) %>%
mutate(total_revenue = ifelse(is.na(total_revenue), 0, total_revenue)) %>%
mutate(label_text = str_glue("State: {state}
Revenue: {format_to_euro(total_revenue)}")) %>%
st_as_sf()
plot_ly(geo_plot_tbl,
split      = ~NAME_1,
color      = ~total_revenue,
colors     = "Blues",
stroke     = I("black"),
hoverinfo  = 'text',
text       = ~label_text,
hoveron    = "fills",
showlegend = FALSE)
